name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if backend Docker image exists
        id: backend-image-check
        run: |
          IMAGE_TAG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest
          if aws ecr describe-images --repository-name backend --image-ids imageTag=latest; then
            echo "Backend image exists."
            echo "::set-output name=exists::true"
          else
            echo "Backend image does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Copy wait-for-it script to backend directory
        run: |
          cp wait-for-it.sh ./backend/wait-for-it.sh

      - name: Build and push backend Docker image
        if: steps.backend-image-check.outputs.exists == 'false'
        run: |
          docker buildx build --platform linux/amd64 -f ./backend/DockerfileProd -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest --push ./backend

      - name: Check if frontend Docker image exists
        id: frontend-image-check
        run: |
          IMAGE_TAG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
          if aws ecr describe-images --repository-name frontend --image-ids imageTag=latest; then
            echo "Frontend image exists."
            echo "::set-output name=exists::true"
          else
            echo "Frontend image does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Build and push frontend Docker image
        if: steps.frontend-image-check.outputs.exists == 'false'
        run: |
          docker buildx build --platform linux/amd64 -f ./frontend/DockerfileProd -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest --push ./frontend

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Create CloudWatch Logs group
        run: |
          aws logs create-log-group --log-group-name /ecs/kanastra || true


      - name: Create ECS Task Definition
        run: |
          echo '{
            "family": "kanastra-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "db",
                "image": "postgres",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "environment": [
                  { "name": "POSTGRES_DB", "value": "kanastra_db" },
                  { "name": "POSTGRES_USER", "value": "kanastra_user" },
                  { "name": "POSTGRES_PASSWORD", "value": "mypassword" },
                  { "name": "POSTGRES_PORT", "value": "5432" }
                ],
                "portMappings": [
                  { "containerPort": 5432, "hostPort": 5432 }
                ]
              },
              {
                "name": "web",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "environment": [
                  { "name": "DB_NAME", "value": "kanastra_db" },
                  { "name": "DB_USER", "value": "kanastra_user" },
                  { "name": "DB_PASSWORD", "value": "mypassword" },
                  { "name": "DB_HOST", "value": "db" },
                  { "name": "DB_PORT", "value": "5432" }
                ],
                "portMappings": [
                  { "containerPort": 8000, "hostPort": 8000 }
                ],
                "command": ["/usr/local/bin/wait-for-it.sh", "db:5432", "--", "sh", "-c", "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/kanastra",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              },
              {
                "name": "frontend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  { "containerPort": 3000, "hostPort": 3000 }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
          }' > ecs-task-def.json

      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-task-def.json

      - name: Create or Update ECS Service
        run: |
          SERVICE_NAME=${{ secrets.ECS_SERVICE }}
          CLUSTER_NAME=${{ secrets.ECS_CLUSTER }}
          TASK_DEFINITION=kanastra-task
          SERVICE_STATE=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text 2>&1)
          echo "Service state: $SERVICE_STATE"
          if echo "$SERVICE_STATE" | grep -q "MISSING"; then
            echo "Service does not exist, creating..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEFINITION \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}"
          elif echo "$SERVICE_STATE" | grep -q "INACTIVE"; then
            echo "Service is inactive, creating a new service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEFINITION \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}"
          elif echo "$SERVICE_STATE" | grep -q "ACTIVE"; then
            echo "Service exists, updating..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_DEFINITION \
              --force-new-deployment
          else
            echo "Service is in state $SERVICE_STATE, waiting for it to become active..."
            # Add logic to wait or handle other states if necessary
          fi